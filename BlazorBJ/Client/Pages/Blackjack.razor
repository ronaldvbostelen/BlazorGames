@page "/blackjack"

@using BlazorBJ.Client.Models;
@using BlazorBJ.Client.Game;
@using BlazorBJ.Client.Game.States


<h1>Play Blackjack  ♠ ♥ ♦ ♣</h1>

@code {
    BlackjackGame game = new BlackjackGame(new Dealer(), new Player());
}

@functions
{
    async Task MakeBetAndDealAsync(decimal amount)
    {
        game.MakeBet(amount);
        StateHasChanged();
        await game.InitialDealingAsync();
        StateHasChanged();
        if (game.Player.HasNaturalBlackjack || game.Dealer.HasNaturalBlackjack)
        {
            game.Payout();
            StateHasChanged();
        }
    }

    async Task HitPlayerAsync()
    {
        await game.HitPlayerAsync();
        StateHasChanged();
        if (game.Player.IsBusted)
        {
            game.Payout();
            StateHasChanged();
        }
    }

    async Task PlayerStandAsync()
    {
        game.StandPlayer();
        StateHasChanged();
        await FinishRoundAsync();
    }

    async Task PlayerDoublingDownAsync()
    {
        await game.PlayerDoubleDownsAsync();
        StateHasChanged();
        await FinishRoundAsync();
    }

    async Task FinishRoundAsync()
    {
        await game.DealersTurnAsync();
        StateHasChanged();
        game.Payout();
        StateHasChanged();
    }
}

<div class="row">
    <div class="col-md-6 col-sm-12">
        <div>
            @{
                int cardCnt = game.Dealer.Deck.Count + 1;
            }
            @while (cardCnt > 0)
            {
                <div class="blackjack-drawdeck">
                    <img src="images/blackjack/cardBack.png" />
                </div>
                cardCnt -= 13;
            }
        </div>
    </div>
    <div class="col-md-6 col-sm-12">
        <div class="card">
            <div class="card-body">
                Score Dealer: <BlackjackScore State="game.State" Player="game.Dealer" /><br/>
                @* Score Player: <BlackjackScore State="game.State" Player="game.Player" /> *@
            @* </div> *@
            @* <div class="card-body"> *@
                @* Funds: <BlackjackFunds Player="game.Player"/><br/> *@
                @* Bet: <BlackjackMessage State="game.State" Bet="game.Player.Bet"/> *@
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12 justify-content-center">
        <img src="images/blackjack/dealer.png"/>
    </div>
    <div class="col-12 justify-content-center">
        <BlackjackHand Cards="game.Dealer.Cards"/>
    </div>
</div>

@if (game.State is PayoutState)
{
    <div class="row"> 
        <div class="col">
            <BlackjackHandResult Player="game.Player" Dealer="game.Dealer" />
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col"><hr style="width:50%"></div>
    </div>
}

<div class="row"> 
    <div class="col-md-6 col-sm-12">
        <BlackjackHand Cards="game.Player.Cards" />
    </div>
    <div class="col-md-6 col-sm-12">
        <div class="card">
            <div class="card-body">
                Score: <BlackjackScore State="game.State" Player="game.Player" /><br/>
                Funds: <BlackjackFunds Player="game.Player"/><br/>
                Bet: <BlackjackMessage State="game.State" Bet="game.Player.Bet"/>
            </div>
        </div>
    </div>
    <div class="col-12">
        @if(!game.Started || game.State is PayoutState)
        {
        <button class="btn btn-secondary"
                @onclick="() => { game.StartGame(); game.ShuffleCards(); }">
            @(game.Started ? "Keep going!" : "Start Game")
        </button>
        }
        @if (game.Player.Funds < 10)
        {
            <button class="btn btn-warning" @onclick="() => game.NewGame()">New game?</button>
        }
        @if (game.State is BettingState)
        {
            @if (game.Player.Funds < 10)
            {
                <span class="display-3 text-danger">Out of money!</span>
            }
            @if (game.Player.Funds >= 10)
            {
                <button class="btn btn-primary" @onclick="(async() => await MakeBetAndDealAsync(10))">
                    Bet $10
                </button>
            }
            @if (game.Player.Funds >= 20)
            {
                <button class="btn btn-primary" @onclick="(async() => await MakeBetAndDealAsync(20))">
                    Bet $20
                </button>
            }
            @if (game.Player.Funds >= 50)
            {
                <button class="btn btn-primary" @onclick="(async() => await MakeBetAndDealAsync(50))">
                    Bet $50
                </button>
            }
        }
        @if (!game.Player.IsBusted && game.State is PlayingState && !game.Player.HasStood)
        {
            <button class="btn btn-primary" @onclick="async () => await PlayerStandAsync()">
                Stand
            </button>
            <button class="btn btn-primary" @onclick="async () => { await HitPlayerAsync(); }">
                Hit
            </button>

            @if (game.Player.CanDoubleDown)
            {
                <br />
                <button class="btn btn-warning" 
                        @onclick="async() =>await PlayerDoublingDownAsync()">
                    Double Down
                </button>
            }

            @if (game.Dealer.HasAceShowing && !game.Player.HasInsurance)
            {
                <br />
                <button class="btn btn-warning" 
                        @onclick="() => game.PlayerTakesInsurance()">
                    Insurance ($@(game.Player.Bet / 2))
                </button>
            }
        }
    </div>
    <div class="col-12">
        @if (game.Player.Funds < 10)
        {
            <span class="display-3 text-danger">Out of money!</span>
        }
    </div>
</div>